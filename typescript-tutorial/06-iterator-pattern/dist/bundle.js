(()=>{"use strict";class e{constructor(e){this.value=e,this.next=null}}class t{constructor(e){this.items=e,this.currentItem=null,this.currentIndex=0,this.currentItem=e[0]}isDone(){return this.currentIndex>this.items.length-1}next(){if(this.isDone())throw new Error("Iterator out of bound.");this.currentIndex++,this.currentItem=this.items[this.currentIndex]}}class r{constructor(e){this.items=e}createIterator(){return new t(this.items)}}new r([1,2,3,4,5]).createIterator();let s=new r([1,2,3]),n=new class extends class{constructor(){this.head=null}length(){if(null===this.head)return 0;let e=0,t=this.head;for(;null!==t;)t=t.next,e++;return e}at(e){if(e>=this.length())throw new Error("Index out of bound");let t=0,r=this.head;for(;t!==e;)r=r.next,t++;return r}insert(t,r){const s=this.length(),n=new e(r);if(s<t)throw new Error("Index out of bound");if(s===t)0===t?this.head=n:this.at(t-1).next=n;else if(0===t){const e=this.head;this.head=n,this.head.next=e}else{const e=this.at(t-1),r=e.next;e.next=n,n.next=r}}remove(e){if(e>this.length())throw new Error("Index out of bound");if(e<0)throw new Error("Index out of bound");if(0==e){const e=this.head;if(1==this.length())null!==this.head&&(this.head.next=null),this.head=null;else{const t=null==e?void 0:e.next;this.head=t,this.head.next=t.next}}else{const t=this.at(e-1);if(this.length()==e+1)t.next=null;else{const r=this.at(e);t.next=r.next}}}getInfo(){let e=this.head,t=0;for(;null!==e;)console.log(`Index ${t}: ${e.value}`),e=e.next,t++}}{createIterator(){const e=[];let r=this.head;for(;null!==r;)e.push(r.value),r=r.next;return new t(e)}};n.insert(0,1),n.insert(1,2),n.insert(2,3),s.createIterator(),n.createIterator();class o{constructor(e){this.value=e,this.leftNode=null,this.rightNode=null,this.parent=null}set left(e){this.leftNode=new o(e),this.leftNode.parent=this}set right(e){this.rightNode=new o(e),this.rightNode.parent=this}}const h=new o(1),i=new class{constructor(e){this.root=e}preorderTraversal(e){this.preorderRecursive(this.root,e)}preorderRecursive(e,t){t(e),null!==e.leftNode&&this.preorderRecursive(e.leftNode,t),null!==e.rightNode&&this.preorderRecursive(e.rightNode,t)}createIterator(){const e=[];return this.preorderTraversal((t=>{e.push(t.value)})),new t(e)}}(h);h.left=2,h.leftNode.left=3,h.leftNode.right=4,h.leftNode.rightNode.left=5,h.right=6,h.rightNode.left=7,h.rightNode.leftNode.left=8,h.rightNode.leftNode.right=9,h.rightNode.leftNode.rightNode.left=10,console.log("Normal Usage:");const l=[];i.preorderTraversal((e=>l.push(e.value))),console.log(l),console.log("Polymorphic Iteration:");const u=[];!function(e,t){for(;!e.isDone();)r=e.currentItem,u.push(r),e.next();var r}(i.createIterator()),console.log(u)})();